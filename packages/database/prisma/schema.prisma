generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model grid {
  id         String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  puzzle     Json
  solution   Json
  difficulty Int         @db.SmallInt
  created_at DateTime    @default(now()) @db.Timestamptz
  sha256     String      @unique
  user_grid  user_grid[]
}

model user {
  id                  String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  pseudo              String
  email               String         @unique(map: "user_email_unique")
  password            String
  avatar              String?
  has_confirmed_email Boolean        @default(false)
  created_at          DateTime       @default(now()) @db.Timestamptz
  updated_at          DateTime?      @updatedAt @db.Timestamptz
  role                Role           @default(member)
  quality             Quality        @default(basic)
  user_grid           user_grid[]
  user_token          user_token[]
  notification        notification[]

  @@index([email])
}

model user_grid {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id     String    @db.Uuid
  grid_id     String    @db.Uuid
  backup_wip  Json?
  started_at  DateTime  @default(now()) @db.Timestamptz
  finished_at DateTime? @db.Timestamptz
  created_at  DateTime  @default(now()) @db.Timestamptz
  updated_at  DateTime? @updatedAt @db.Timestamptz
  score       Int?
  time        Int?
  grid        grid      @relation(fields: [grid_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "user_grid_grid_id_foreign")
  user        user      @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "user_grid_user_id_foreign")

  @@unique([user_id, grid_id])
  @@index([user_id])
}

model user_token {
  id         String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id    String    @db.Uuid
  token      String    @unique
  type       TokenType
  expires_at DateTime  @db.Timestamptz
  used_at    DateTime? @db.Timestamptz
  created_at DateTime  @default(now()) @db.Timestamptz

  user user @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@index([token])
  @@index([user_id, type])
}

model notification {
  id         String                @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id    String                @db.Uuid
  type       NotificationType
  transport  NotificationTransport
  created_at DateTime              @default(now()) @db.Timestamptz

  user user @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@index([user_id])
}

enum TokenType {
  password_reset
  email_verification
}

enum NotificationType {
  password_reset
  email_verification
}

enum NotificationTransport {
  email
}

enum Role {
  member
  admin
}

enum Quality {
  basic
  premium
}
